datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model Comment{
  id        Int      @id @default(autoincrement())
  content   String
  url       CommentUrl[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User?    @relation(fields: [authorId], references: [id])
  authorId Int?
  post      Post?    @relation(fields: [postId], references: [id])
  postId   Int?

}

model CommentUrl {
  url     String
  commentId  Int
  comment    Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@id([url, commentId])
}

model Post {
  id              Int      @id @default(autoincrement())
  title           String
  content         String
  url             PostUrl[]
  comments        Comment[]
  likes           Int      @default(0)
  users_liking    UserLikePost[]
  dislikes        Int      @default(0)
  users_disliking UserDislikePost[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  private         Boolean  @default(false)
  author          User?    @relation(fields: [authorId], references: [id])
  authorId        Int?
}

model PostUrl{
  url     String
  postId  Int
  post    Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([url, postId])
}

model User {
  id              Int     @id @default(autoincrement())
  email           String  @unique
  password        String 
  name            String?
  surname         String?
  createdAt       DateTime @default(now())
  posts           Post[]
  comments        Comment[]
  posts_liked     UserLikePost[]
  posts_disliked  UserDislikePost[]
  profilePicUrl   String @default("~/assets/img/prodilePic/default.png")
}
model Friend{
  user1Id       Int
  user2Id       Int
  @@id([user1Id, user2Id])
}

model UserLikePost {
  post      Post @relation(fields: [postId], references: [id])
  postId    Int
  user      User @relation(fields: [userId], references: [id])
  userId    Int
  @@id([postId, userId])
}

model UserDislikePost{
  post      Post @relation(fields: [postId], references: [id])
  postId    Int
  user      User @relation(fields: [userId], references: [id])
  userId    Int
  @@id([postId, userId])
}

model Invite{
  id              Int     @id @default(autoincrement())
  user_from_id    Int
  user_to_id      Int
  status          Int @default(1)
  // statuses 1 - pending, 2 - accepted, 3 -rejected
}

model chat {
  id              Int     @id @default(autoincrement())
  name            String  
}

model chatUser{
  chatId          Int
  chatUser        Int
  @@id([chatId, chatUser])
}

model chatMessage{
  id              Int     @id @default(autoincrement())
  content         String
  authorId        Int
  chatId          Int        
  createdAt       DateTime @default(now())
  hide            Boolean @default(false)
}